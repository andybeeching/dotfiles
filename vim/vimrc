" Compatibility
set nocompatible

" Load shipped plugins
runtime macros/matchit.vim

" Load bundled plugins
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

" File Settings
filetype plugin indent on
set encoding=utf-8
set modelines=0                   " Prevent security exploits with modelines
set ttyfast                       " Indicate a fast terminal connection
set nobackup                      " Don't backup before overwriting a file.
set nowritebackup
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

" Editor Behaviour
set backspace=indent,eol,start    " Allow liberal backspacing in insert mode
syntax enable
set number
set numberwidth=5
set ruler
set cursorline
set wrap
set scrolloff=3                   " Display 3 lines around the cursor
set colorcolumn=81								" Denote 80 col measure
set list
set listchars=tab:»\ ,eol:¬,      " Show invisible chars like textmate 
                                  " (options: trail::.,extends:#,nbsp:.)
set linebreak                     " Soft wrapping
set display=lastline              " Display only last line if truncated
set visualbell
set noerrorbells
set nojoinspaces

" Improve syntax highlighting
au BufRead,BufNewFile Gemfile set filetype=ruby
au BufRead,BufNewFile *.md set filetype=markdown

" Basic Keymappings
let mapleader=","                 " Change from /
:imap <Leader>, <Esc>             " Custom ESC from insert to normal mode
nnoremap <tab> %
vnoremap <tab> %
nnoremap ; :                      " Less SHFIT!
vnoremap ; :
nnoremap j gj
nnoremap k gk
cmap w!! w !sudo tee % >/dev/null " Allow sudo save file
nnoremap <leader>a :Ack
nnoremap <leader>v V`]            " Reselects pasted text for ops

" Window kemappings
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Shell Behaviour
set hidden                        " Permit hidden buffers
set showcmd
set showmode
set wildmenu                      " Enhanced command line completion
set wildmode=list:longest         " Complete files like a shell
set wildignore=*.swp,*.bak,*.pyc,*.class
set complete=.,w,t
nnoremap / /\v                    " Automagically use magic RegEx mode
vnoremap / /\v
set gdefault                      " Apply substitutions globally on lines
set title
set laststatus=2                  " Show the status line all the time

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Search Behaviour
set ignorecase
set smartcase                     " Clever search if capital letter present
set showmatch                     " Show matching parenthesis
set incsearch                     " Highlight matches as you type
set hlsearch                      
nnoremap <leader><space> :noh<cr> " Alias to clear search

" Appearance
set background=dark " Signal use of dark theme
colorscheme solarized
set showcmd
set showmode

" Whitespace Config
set tabstop=2                     
set shiftwidth=2                  
set shiftround                    " Multiple of shiftwidth <>
set expandtab                     " Spaces > Tabs
set autoindent
set copyindent
set smarttab

"Strip trailing whitespace automagikally
" Just don't use vim as a hex editor!!
autocmd BufWritePre * :call <SID>StripWhite()
fun! <SID>StripWhite()
    %s/[ \t]\+$//ge
    %s!^\( \+\)\t!\=StrRepeat("\t", 1 + strlen(submatch(1)) / 8)!ge
endfun

" Plugin Key Mappings
" Omnisense
set completefunc=syntaxcomplete#Complete

" Supertab to act for omnisense
 function! SuperCleverTab()
    if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
        return "\<Tab>"
    else
        if &omnifunc != ''
            return "\<C-X>\<C-O>"
        elseif &dictionary != ''
            return "\<C-K>"
        else
            return "\<C-N>"
        endif
    endif
endfunction
inoremap <Tab> <C-R>=SuperCleverTab()<cr>

" Snipmate
let g:snippetsEmu_key = "<S-Tab>"   " Snippets are activated by Shift+Tab

" Vimux
" Run the current file with rspec
" map <Leader>j :call RunVimTmuxCommand("clear; rspec " . bufname("%"))<CR>

" Run the current file with corresponding tests
map <Leader>j :call RunVimTmuxCommand("clear; ruby " . bufname("%"))<CR>

" Prompt for a command to run
map <Leader>f :PromptVimTmuxCommand<CR>

" Run last command executed by RunVimTmuxCommand
map <Leader>k :RunLastVimTmuxCommand<CR>

" Inspect runner pane
map <Leader>ri :InspectVimTmuxRunner<CR>

" Close all other tmux panes in current window
map <Leader>rx :CloseVimTmuxPanes<CR>

" Interrupt any command running in the runner pane
map <Leader>rs :InterruptVimTmuxRunner<CR>

" Prompt for a command to run
map <LocalLeader>vp :PromptVimTmuxCommand<CR>

" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <LocalLeader>vs "vy :call RunVimTmuxCommand(@v . "\n", 0)<CR>

" Select current paragraph and send it to tmux
nmap <LocalLeader>vs vip<LocalLeader>vs<CR>

" Automatic fold settings for specific files. Uncomment to use.
" autocmd FileType ruby setlocal foldmethod=syntax
" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2
" autocmd FileType txt setlocal colorcoloumn=0
" autocmd FileType textile setlocal colorcoloumn=0

" Disable Arrow keys to force-use hjkl
noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>