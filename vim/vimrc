set nocompatible                  " Must come first because it changes other options.

runtime macros/matchit.vim        " Load the matchit plugin.

" Load the pathogen plugin
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()            " Load other plugins in /bundle

" change the mapleader from \ to ,
let mapleader=","

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

set modelines=0                   " Prevent security exploits with modelines

set background=dark               " Dark background mode (not clever)
colorscheme solarized             " Give the solarized palette a whirl
"let g:solarized_termtrans = 1

"Auto start NerdTree"
autocmd vimenter * NERDTree
"Ability to close Vim, even if only window open contains NerdTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

set encoding=utf-8                " Set default encoding of document to UTF-8

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.
set ttyfast                       " Indicate a fast terminal connection

set backspace=indent,eol,start    " Allow backspacing over everything in insert mode

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.
set wildignore=*.swp,*.bak,*.pyc,*.class "Ignore file types in autocomplete mode

" Automatically insert \v before any string to use magic RegEx mode
nnoremap / /\v
" Automatically insert \v before any string to use magic RegEx mode
vnoremap / /\v
set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.
set gdefault                      " Apply substitutions globally on lines
set showmatch                     " Set show matching parenthesis
set incsearch                     " Highlight matches as you type
set hlsearch                      " Highlight matches
nnoremap <leader><space> :noh<cr> " 
nnoremap <tab> %
vnoremap <tab> %

set number                        " Show line numbers.
"set relativenumber                " Displays how far each line is away from current one
set ruler                         " Show cursor position.
set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.
set colorcolumn=81								" Insert a coloured column to denote measure
"set textwidth=80                  " Set column width to 80 chars - works well for hard wrapping
"set list                          " Show formatting chars
set listchars=tab:»\ ,eol:¬       " Show invisible chars like textmate (options: trail::.,extends:#,nbsp:.)
set linebreak                     " Make wrappings respect word boundaries (soft wrapping)
set display=lastline              " Only display the last line of a block of text if can't fit on screen

" Highlight trailing whitespace
" hi link localWhitespaceError Error
" autocmd Syntax * syn match localWhitespaceError excludenl /\s\+\%#\@<!$\| \+\ze\t/ display containedin=ALL

set title                         " Set the terminal's title
set visualbell                    " No beeping.
set noerrorbells                  " Don't beep

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

" Whitespace options
set tabstop=2                     " Global tab width.
set shiftwidth=2                  " And again, related.
set shiftround                    " Use multiple of shiftwidth when indenting with '<' and '>'
set expandtab                     " Use spaces instead of tabs
set autoindent                    " Always set autoindenting on
set copyindent                    " Copy the previous indentation on autoindenting
set smarttab                      " insert tabs on the start of a line according to shiftwidth, not tabstop
set laststatus=2                  " Show the status line all the time

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Controversial...swap colon and semicolon for easier commands
"nnoremap ; :
"nnoremap : ;

"vnoremap ; :
"vnoremap : ;

" Lite version - just semi-colon to colon
nnoremap ; :
vnoremap ; :

" Disable Arrow keys to force-use hjkl
noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>

" Allow for navigation of lines within a wrapped line
nnoremap j gj
nnoremap k gk

" Same as above but use of CMD + key allows $, 0, ^ use as well
vmap <D-4> g$
vmap <D-6> g^
vmap <D-0> g^
nmap <D-4> g$
nmap <D-6> g^
nmap <D-0> g^

" Allow use of !!w to write to protected files
cmap w!! w !sudo tee % >/dev/null

" Customised leader commands
" Shortcut to ack
nnoremap <leader>a :Ack
" Reselects pasted text to have commands performed on it
nnoremap <leader>v V`]
" Split current window vertically and focus in it
nnoremap <leader>w <C-w>v<C-w>l

" Shortcuts for navigating splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Key mappings for vimux (note: some modified from originals)

" Run the current file with rspec
" map <Leader>j :call RunVimTmuxCommand("clear; rspec " . bufname("%"))<CR>

" Run the current file with corresponding tests
map <Leader>j :call RunVimTmuxCommand("clear; ruby " . bufname("%"))<CR>

" Prompt for a command to run
map <Leader>f :PromptVimTmuxCommand<CR>

" Run last command executed by RunVimTmuxCommand
map <Leader>k :RunLastVimTmuxCommand<CR>

" Inspect runner pane
map <Leader>ri :InspectVimTmuxRunner<CR>

" Close all other tmux panes in current window
map <Leader>rx :CloseVimTmuxPanes<CR>

" Interrupt any command running in the runner pane
map <Leader>rs :InterruptVimTmuxRunner<CR>

" Prompt for a command to run
map <LocalLeader>vp :PromptVimTmuxCommand<CR>

" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <LocalLeader>vs "vy :call RunVimTmuxCommand(@v . "\n", 0)<CR>

" Select current paragraph and send it to tmux
nmap <LocalLeader>vs vip<LocalLeader>vs<CR>

" Custom ESC from insert to normal mode
:imap <Leader>, <Esc>

" Automatic fold settings for specific files. Uncomment to use.
" autocmd FileType ruby setlocal foldmethod=syntax
" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2
" autocmd FileType txt setlocal colorcoloumn=0
" autocmd FileType textile setlocal colorcoloumn=0

"Strip trailing whitespace automagikally
" Just don't use vim as a hex editor!!
autocmd BufWritePre * :call <SID>StripWhite()
fun! <SID>StripWhite()
    %s/[ \t]\+$//ge
    %s!^\( \+\)\t!\=StrRepeat("\t", 1 + strlen(submatch(1)) / 8)!ge
endfun