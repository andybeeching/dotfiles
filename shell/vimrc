" Vi Compatibility
set nocompatible

" Play Nice with tmux
set ttymouse=xterm

" Load shipped plugins
runtime macros/matchit.vim

" Load bundled plugins
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

" File Settings
filetype plugin indent on
set encoding=utf-8
set modelines=0                   " Prevent security exploits with modelines
set ttyfast                       " Indicate a fast terminal connection
set nobackup                      " Don't backup before overwriting a file.
set nowritebackup
set dir=/tmp//                    " Keep swap files in one location

" Editor Behaviour
set backspace=indent,eol,start    " Allow liberal backspacing in insert mode
syntax enable
set number
set numberwidth=3
set ruler
set cursorline
set wrap
set scrolloff=3                   " Display 3 lines around the cursor
set colorcolumn=81                " Denote 80 col measure
set list
set listchars=tab:»\ ,eol:¬,      " Show invisible chars like textmate
                                  " (options: trail::.,extends:#,nbsp:.)
set linebreak
set display=lastline              " Display only last line if truncated
set visualbell
set noerrorbells
set nojoinspaces
set spell
set showmatch                      "Show matching brackets
set autoread                       "Auto-reload modified files (wo local change)"
set report=0                       "Report all changes"

" Improve syntax highlighting
au BufRead,BufNewFile Gemfile set filetype=ruby
au BufRead,BufNewFile *.md set filetype=markdown

" Basic Keymappings
let mapleader=","
:imap <Leader>, <Esc>
nnoremap <tab> %
vnoremap <tab> %
nnoremap ; :
vnoremap ; :
nnoremap j gj
nnoremap k gk
cmap w!! w !sudo tee % >/dev/null
nnoremap <leader>a :Ack
" Reselects pasted text for ops
nnoremap <leader>v V`]

" Window keymappings
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Misc Keymappings
" Create an empty line underneath without moving the cursor
noremap <CR> O<Esc>`l

" Shell Behaviour
set hidden                        " Permit hidden buffers
set showcmd
set showmode
set wildmenu                      " Enhanced command line completion
set wildmode=list:longest         " Complete files like a shell
set wildignore=*.swp,*.bak,*.pyc,*.class
set complete=.,w,t
set gdefault                      " Apply substitutions globally on lines
set title
set laststatus=2                  " Show the status line all the time
set magic                         " Use magic mode for regular expressions

" Search Behaviour
set ignorecase
set smartcase                     " Clever search if capital letter present
set showmatch                     " Show matching parenthesis
set incsearch                     " Highlight matches as you type
set hlsearch
nnoremap <leader><space> :noh<cr> " Alias to clear search

" Appearance
set background=dark               " Signal use of dark theme to vim
colorscheme solarized
set showcmd
set showmode
let g:solarized_diffmode="high"

" Whitespace Config
set tabstop=2
set shiftwidth=2
set shiftround                    " Multiple of shiftwidth <>
set expandtab                     " Spaces > Tabs
set autoindent
set copyindent
set smarttab
set smartindent

" Per-file Whitespace Settings
autocmd BufEnter *.css  set softtabstop=4|set shiftwidth=4
autocmd BufEnter *.html set shiftwidth=4|set noexpandtab

"Strip trailing whitespace automagikally
autocmd BufWritePre * :%s/\s\+$//e

" Plugin Key Mappings
" Fugitive
" Clean up superfluous Fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete
" Provide shortcut to traverse up fugitive tree listing
autocmd User fugitive
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif

" Powerline
let g:Powerline_symbols = 'fancy'

" Numbers
nnoremap <F3> :NumbersToggle<CR>

" Omnisense
set completefunc=syntaxcomplete#Complete

" Supertab to act for omnisense
 function! SuperCleverTab()
    if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
        return "\<Tab>"
    else
        if &omnifunc != ''
            return "\<C-X>\<C-O>"
        elseif &dictionary != ''
            return "\<C-K>"
        else
            return "\<C-N>"
        endif
    endif
endfunction
inoremap <Tab> <C-R>=SuperCleverTab()<cr>

" NERDTree
map <silent> <leader>d :NERDTreeToggle<CR>

" Snipmate
" Snippets are activated by Shift+Tab
let g:snippetsEmu_key = "<S-Tab>"

" Vimux
let g:VimuxUseNearestPane = 1

" Run the current file with rspec
" map <Leader>j :call RunVimTmuxCommand("clear; rspec " . bufname("%"))<CR>

" Run the current file with corresponding tests
map <Leader>j :call RunVimTmuxCommand("clear; ruby " . bufname("%"))<CR>

" Prompt for a command to run
map <Leader>f :PromptVimTmuxCommand<CR>

" Run last command executed by RunVimTmuxCommand
map <Leader>k :RunLastVimTmuxCommand<CR>

" Inspect runner pane
map <Leader>ri :InspectVimTmuxRunner<CR>

" Close all other tmux panes in current window
map <Leader>rx :CloseVimTmuxPanes<CR>

" Interrupt any command running in the runner pane
map <Leader>rs :InterruptVimTmuxRunner<CR>

" Prompt for a command to run
map <LocalLeader>vp :PromptVimTmuxCommand<CR>

" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <LocalLeader>vs "vy :call RunVimTmuxCommand(@v . "\n", 0)<CR>

" Select current paragraph and send it to tmux
nmap <LocalLeader>vs vip<LocalLeader>vs<CR>

" vimux-ruby-test
" Prompt for a command to run
map <Leader>e :RunRubyFocusedTest<CR>
map <Leader>c :RunRubyFocusedContext<CR>

" Automatic fold settings for specific files. Uncomment to use.
" autocmd FileType ruby setlocal foldmethod=syntax
" autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2
" autocmd FileType txt setlocal colorcoloumn=0
" autocmd FileType textile setlocal colorcoloumn=0

" Disable Arrow keys to force-use hjkl
noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>
